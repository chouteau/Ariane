<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ariane</name>
    </assembly>
    <members>
        <member name="T:Ariane.MessageReaderBase`1">
            <summary>
            Generic reader base
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ariane.MessageReaderBase`1.ProcessMessage(`0)">
            <summary>
            Starts processing the associated message
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Ariane.DynamicMessageReaderBase">
            <summary>
            Dynamic message reader base
            </summary>
        </member>
        <member name="M:Ariane.DynamicMessageReaderBase.ProcessMessage(System.Dynamic.ExpandoObject)">
            <summary>
            Process dynamic message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ariane.DynamicMessageReaderBase.Process(System.String,System.Object)">
            <summary>
            Process dynamic named message
            </summary>
            <param name="messageName"></param>
            <param name="message"></param>
        </member>
        <member name="T:Ariane.FileMedium">
            <summary>
            Represents the queue of type File System
            </summary>
        </member>
        <member name="T:Ariane.IMedium">
            <summary>
            Represent the type of queue
            </summary>
        </member>
        <member name="M:Ariane.IMedium.CreateMessageQueue(System.String)">
            <summary>
            Create message queue
            </summary>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.FileMedium.CreateMessageQueue(System.String)">
            <summary>
            Create message queue compatible with file system
            </summary>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="T:Ariane.Message`1">
            <summary>
            Represents a generic message
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ariane.Message`1.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Ariane.Message`1.QueueName">
            <summary>
            Name of queue
            </summary>
        </member>
        <member name="P:Ariane.Message`1.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="P:Ariane.Message`1.Body">
            <summary>
            Body
            </summary>
        </member>
        <member name="P:Ariane.Message`1.Recoverable">
            <summary>
            Indicates whether the message should persist in the queue for a subsequent recovery
            </summary>
        </member>
        <member name="T:Ariane.IDependencyResolver">
            <summary>
            Dependency resolver
            </summary>
        </member>
        <member name="M:Ariane.IDependencyResolver.GetService(System.Type)">
            <summary>
            Get service for type
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.IDependencyResolver.GetServices(System.Type)">
            <summary>
            Get services for type
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.IDependencyResolver.GetAllServices">
            <summary>
            Get all services
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ariane.IFluentRegister">
            <summary>
            Fluent registration for queues
            </summary>
        </member>
        <member name="M:Ariane.IFluentRegister.AddFromConfig(System.String)">
            <summary>
            Add from file
            </summary>
            <param name="configFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.IFluentRegister.AddQueue(Ariane.QueueSetting)">
            <summary>
            Add with Settings
            </summary>
            <param name="queueSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.IFluentRegister.AddQueue``1(Ariane.QueueSetting,System.Action{``0})">
            <summary>
            Add with settings for anonymous reader
            </summary>
            <typeparam name="T"></typeparam>
            <param name="settings"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:Ariane.QueueProviders.FileData">
            <summary>
            Contains information about a file returned by the 
            <see cref="T:Ariane.QueueProviders.FastDirectoryEnumerator"/> class.
            </summary>
        </member>
        <member name="F:Ariane.QueueProviders.FileData.Attributes">
            <summary>
            Attributes of the file.
            </summary>
        </member>
        <member name="F:Ariane.QueueProviders.FileData.CreationTimeUtc">
            <summary>
            File creation time in UTC
            </summary>
        </member>
        <member name="F:Ariane.QueueProviders.FileData.LastAccessTimeUtc">
            <summary>
            File last access time in UTC
            </summary>
        </member>
        <member name="F:Ariane.QueueProviders.FileData.LastWriteTimeUtc">
            <summary>
            File last write time in UTC
            </summary>
        </member>
        <member name="F:Ariane.QueueProviders.FileData.Size">
            <summary>
            Size of the file in bytes
            </summary>
        </member>
        <member name="F:Ariane.QueueProviders.FileData.Name">
            <summary>
            Name of the file
            </summary>
        </member>
        <member name="F:Ariane.QueueProviders.FileData.Path">
            <summary>
            Full path to the file.
            </summary>
        </member>
        <member name="M:Ariane.QueueProviders.FileData.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Ariane.QueueProviders.FileData.#ctor(System.String,Ariane.QueueProviders.WIN32_FIND_DATA)">
            <summary>
            Initializes a new instance of the <see cref="T:Ariane.QueueProviders.FileData"/> class.
            </summary>
            <param name="dir">The directory that the file is stored at</param>
            <param name="findData">WIN32_FIND_DATA structure that this
            object wraps.</param>
        </member>
        <member name="P:Ariane.QueueProviders.FileData.LastAccesTime">
            <summary>
            Gets the last access time in local time.
            </summary>
        </member>
        <member name="P:Ariane.QueueProviders.FileData.LastWriteTime">
            <summary>
            Gets the last access time in local time.
            </summary>
        </member>
        <member name="T:Ariane.QueueProviders.WIN32_FIND_DATA">
            <summary>
            Contains information about the file that is found 
            by the FindFirstFile or FindNextFile functions.
            </summary>
        </member>
        <member name="M:Ariane.QueueProviders.WIN32_FIND_DATA.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Ariane.QueueProviders.FastDirectoryEnumerator">
            <summary>
            A fast enumerator of files in a directory.  Use this if you need to get attributes for 
            all files in a directory.
            </summary>
            <remarks>
            This enumerator is substantially faster than using <see cref="M:System.IO.Directory.GetFiles(System.String)"/>
            and then creating a new FileInfo object for each path.  Use this version when you 
            will need to look at the attibutes of each file returned (for example, you need
            to check each file in a directory to see if it was modified after a specific date).
            </remarks>
        </member>
        <member name="M:Ariane.QueueProviders.FastDirectoryEnumerator.EnumerateFiles(System.String)">
            <summary>
            Gets <see cref="T:Ariane.QueueProviders.FileData"/> for all the files in a directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>An object that implements <see cref="T:System.Collections.Generic.IEnumerable`1"/> and 
            allows you to enumerate the files in the given directory.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is a null reference (Nothing in VB)
            </exception>
        </member>
        <member name="M:Ariane.QueueProviders.FastDirectoryEnumerator.EnumerateFiles(System.String,System.String)">
            <summary>
            Gets <see cref="T:Ariane.QueueProviders.FileData"/> for all the files in a directory that match a 
            specific filter.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against files in the path.</param>
            <returns>An object that implements <see cref="T:System.Collections.Generic.IEnumerable`1"/> and 
            allows you to enumerate the files in the given directory.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is a null reference (Nothing in VB)
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filter"/> is a null reference (Nothing in VB)
            </exception>
        </member>
        <member name="M:Ariane.QueueProviders.FastDirectoryEnumerator.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets <see cref="T:Ariane.QueueProviders.FileData"/> for all the files in a directory that 
            match a specific filter, optionally including all sub directories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against files in the path.</param>
            <param name="searchOption">
            One of the SearchOption values that specifies whether the search 
            operation should include all subdirectories or only the current directory.
            </param>
            <returns>An object that implements <see cref="T:System.Collections.Generic.IEnumerable`1"/> and 
            allows you to enumerate the files in the given directory.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is a null reference (Nothing in VB)
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filter"/> is a null reference (Nothing in VB)
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="searchOption"/> is not one of the valid values of the
            <see cref="T:System.IO.SearchOption"/> enumeration.
            </exception>
        </member>
        <member name="M:Ariane.QueueProviders.FastDirectoryEnumerator.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets <see cref="T:Ariane.QueueProviders.FileData"/> for all the files in a directory that match a 
            specific filter.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against files in the path.</param>
            <returns>An object that implements <see cref="T:System.Collections.Generic.IEnumerable`1"/> and 
            allows you to enumerate the files in the given directory.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is a null reference (Nothing in VB)
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filter"/> is a null reference (Nothing in VB)
            </exception>
        </member>
        <member name="T:Ariane.QueueProviders.FastDirectoryEnumerator.FileEnumerable">
            <summary>
            Provides the implementation of the 
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface
            </summary>
        </member>
        <member name="M:Ariane.QueueProviders.FastDirectoryEnumerator.FileEnumerable.#ctor(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Ariane.QueueProviders.FastDirectoryEnumerator.FileEnumerable"/> class.
            </summary>
            <param name="path">The path to search.</param>
            <param name="filter">The search string to match against files in the path.</param>
            <param name="searchOption">
            One of the SearchOption values that specifies whether the search 
            operation should include all subdirectories or only the current directory.
            </param>
        </member>
        <member name="M:Ariane.QueueProviders.FastDirectoryEnumerator.FileEnumerable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can 
            be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Ariane.QueueProviders.FastDirectoryEnumerator.FileEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be 
            used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Ariane.QueueProviders.FastDirectoryEnumerator.SafeFindHandle">
            <summary>
            Wraps a FindFirstFile handle.
            </summary>
        </member>
        <member name="M:Ariane.QueueProviders.FastDirectoryEnumerator.SafeFindHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ariane.QueueProviders.FastDirectoryEnumerator.SafeFindHandle"/> class.
            </summary>
        </member>
        <member name="M:Ariane.QueueProviders.FastDirectoryEnumerator.SafeFindHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns>
            true if the handle is released successfully; otherwise, in the 
            event of a catastrophic failure, false. In this case, it 
            generates a releaseHandleFailed MDA Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:Ariane.QueueProviders.FastDirectoryEnumerator.FileEnumerator">
            <summary>
            Provides the implementation of the 
            <see cref="T:System.Collections.Generic.IEnumerator`1"/> interface
            </summary>
        </member>
        <member name="M:Ariane.QueueProviders.FastDirectoryEnumerator.FileEnumerator.#ctor(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Ariane.QueueProviders.FastDirectoryEnumerator.FileEnumerator"/> class.
            </summary>
            <param name="path">The path to search.</param>
            <param name="filter">The search string to match against files in the path.</param>
            <param name="searchOption">
            One of the SearchOption values that specifies whether the search 
            operation should include all subdirectories or only the current directory.
            </param>
        </member>
        <member name="M:Ariane.QueueProviders.FastDirectoryEnumerator.FileEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ariane.QueueProviders.FastDirectoryEnumerator.FileEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Ariane.QueueProviders.FastDirectoryEnumerator.FileEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Ariane.QueueProviders.FastDirectoryEnumerator.FileEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:Ariane.QueueProviders.FastDirectoryEnumerator.FileEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:Ariane.QueueProviders.FastDirectoryEnumerator.FileEnumerator.SearchContext">
            <summary>
            Hold context information about where we current are in the directory search.
            </summary>
        </member>
        <member name="T:Ariane.IMessageQueue">
            <summary>
            Represent a generic queue
            </summary>
        </member>
        <member name="M:Ariane.IMessageQueue.BeginReceive">
            <summary>
            Start begin receive async message
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ariane.IMessageQueue.EndReceive``1(System.IAsyncResult)">
            <summary>
            End receive async message
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.IMessageQueue.Reset">
            <summary>
            Reset receive
            </summary>
        </member>
        <member name="M:Ariane.IMessageQueue.Send``1(Ariane.Message{``0})">
            <summary>
            Send message
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
        </member>
        <member name="M:Ariane.IMessageQueue.SetTimeout">
            <summary>
            Called when timeout raised
            </summary>
        </member>
        <member name="P:Ariane.IMessageQueue.QueueName">
            <summary>
            The name of queue
            </summary>
        </member>
        <member name="P:Ariane.IMessageQueue.Timeout">
            <summary>
            Timeout between read messages
            </summary>
        </member>
        <member name="T:Ariane.BusManager">
            <summary>
            Implementation of Service Bus
            </summary>
        </member>
        <member name="T:Ariane.IServiceBus">
            <summary>
            Service Bus
            </summary>
        </member>
        <member name="M:Ariane.IServiceBus.StartReading">
            <summary>
            Start reading for item in queues and process
            </summary>
        </member>
        <member name="M:Ariane.IServiceBus.StartReading(System.String)">
            <summary>
            Start reading specific queue 
            </summary>
            <param name="queueName"></param>
        </member>
        <member name="M:Ariane.IServiceBus.Receive``1(System.String,System.Int32,System.Int32)">
            <summary>
            Receive list of item from queue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queueName"></param>
            <param name="count"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.IServiceBus.StopReading">
            <summary>
            Stop reading queues
            </summary>
        </member>
        <member name="M:Ariane.IServiceBus.StopReading(System.String)">
            <summary>
            Stop reading specific queue
            </summary>
            <param name="queueName"></param>
        </member>
        <member name="M:Ariane.IServiceBus.Send``1(System.String,``0,System.String)">
            <summary>
            Send typed object in queue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queueName"></param>
            <param name="body"></param>
            <param name="label"></param>
        </member>
        <member name="M:Ariane.IServiceBus.SyncProcess``1(System.String,``0,System.String)">
            <summary>
            Process message directly synchronously for unit tests 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queueName"></param>
            <param name="body"></param>
        </member>
        <member name="M:Ariane.IServiceBus.CreateMessage(System.String)">
            <summary>
            Create dynamic message with name
            </summary>
            <param name="messageName"></param>
            <returns></returns>
        </member>
        <member name="P:Ariane.IServiceBus.Register">
            <summary>
            Register queues
            </summary>
        </member>
        <member name="M:Ariane.BusManager.SyncProcess``1(System.String,``0,System.String)">
            <summary>
            Used by Unit Test
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queueName"></param>
            <param name="body"></param>
            <param name="label"></param>
        </member>
        <member name="T:Ariane.InMemoryMedium">
            <summary>
            Queue in memory
            </summary>
        </member>
        <member name="M:Ariane.InMemoryMedium.CreateMessageQueue(System.String)">
            <summary>
            Create queue
            </summary>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="T:Ariane.MSMQMedium">
            <summary>
            Represents a queue MSMQ Type
            </summary>
        </member>
        <member name="M:Ariane.MSMQMedium.CreateMessageQueue(System.String)">
            <summary>
            Create message compatible with MSMQ
            </summary>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="T:Ariane.QueueSetting">
            <summary>
            Settings of queue
            </summary>
        </member>
        <member name="P:Ariane.QueueSetting.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Ariane.QueueSetting.TypeReader">
            <summary>
            Type of reader
            </summary>
        </member>
        <member name="P:Ariane.QueueSetting.TypeMedium">
            <summary>
            Type of medium
            </summary>
        </member>
        <member name="P:Ariane.QueueSetting.AutoStartReading">
            <summary>
            Whether reading the messages in the queue should start automatically
            </summary>
        </member>
        <member name="M:Ariane.RegisterExtensions.AddMemoryReader(Ariane.IFluentRegister,System.String,System.Type)">
            <summary>
            Add memory reader
            </summary>
            <param name="register"></param>
            <param name="queueName"></param>
            <param name="typeReader"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.RegisterExtensions.AddMemoryReader``1(Ariane.IFluentRegister,System.String,System.Action{``0})">
            <summary>
            Add anonymous memory reader
            </summary>
            <typeparam name="T"></typeparam>
            <param name="register"></param>
            <param name="queueName"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.RegisterExtensions.AddMemoryWriter(Ariane.IFluentRegister,System.String)">
            <summary>
            Add memory writer
            </summary>
            <param name="register"></param>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.RegisterExtensions.AddMSMQReader(Ariane.IFluentRegister,System.String,System.Type)">
            <summary>
            Add MSMQ Reader
            </summary>
            <param name="register"></param>
            <param name="queueName"></param>
            <param name="typeReader"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.RegisterExtensions.AddMSMQReader``1(Ariane.IFluentRegister,System.String,System.Action{``0})">
            <summary>
            Add anonymous MSMQ Reader
            </summary>
            <typeparam name="T"></typeparam>
            <param name="register"></param>
            <param name="queueName"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.RegisterExtensions.AddMSMQWriter(Ariane.IFluentRegister,System.String)">
            <summary>
            Add MSMQ Writer
            </summary>
            <param name="register"></param>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.RegisterExtensions.AddFileReader(Ariane.IFluentRegister,System.String,System.Type)">
            <summary>
            Add File Reader
            </summary>
            <param name="register"></param>
            <param name="queueName"></param>
            <param name="typeReader"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.RegisterExtensions.AddFileReader``1(Ariane.IFluentRegister,System.String,System.Action{``0})">
            <summary>
            Add anonymous File Reader
            </summary>
            <typeparam name="T"></typeparam>
            <param name="register"></param>
            <param name="queueName"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Ariane.RegisterExtensions.AddFileWriter(Ariane.IFluentRegister,System.String)">
            <summary>
            Add File Writer
            </summary>
            <param name="register"></param>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="T:Ariane.ServiceBusConfiguration">
            <summary>
            Configuration of Service Bus
            </summary>
        </member>
        <member name="P:Ariane.ServiceBusConfiguration.DependencyResolver">
            <summary>
            Resolver 
            </summary>
        </member>
        <member name="P:Ariane.ServiceBusConfiguration.Logger">
            <summary>
            Logger
            </summary>
        </member>
        <member name="T:Ariane.SyncBusManager">
            <summary>
            Decorator for synchronized bus for tests
            </summary>
        </member>
    </members>
</doc>
